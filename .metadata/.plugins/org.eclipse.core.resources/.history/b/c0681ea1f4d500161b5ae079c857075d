package kb.pl.client;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.Label;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;

import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ScrollPaneConstants;
import javax.swing.text.DefaultCaret;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationEvent;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.context.ApplicationListener;
import org.springframework.stereotype.Component;

import kb.pl.protocol.Message;

@Component
public class MainWindow extends JFrame implements ApplicationListener {
	
//	private JFrame frame;
	private Label label;
	private JTextField writeMessageField;
	private JButton send;
	private JTextArea receivedMessages;
	private ButtonGroup technologies;
	private JPanel radios;
	private JPanel message;
	private JScrollPane scrollPane;
	private DefaultCaret caret;
	boolean firstClick = true;
	
	private final ApplicationEventPublisher publisher;
	private static String userName;
	
	@Autowired
	private final CommunicationService communicationService;
	
	private static int userId;
	long timestamp = new Timestamp(System.currentTimeMillis());
	@Autowired
	public MainWindow(ApplicationEventPublisher publisher, CommunicationService communicationService /*LoginPanel loginPanel, AppPanel appPanel*/) {
		
		userName = JOptionPane.showInputDialog("Podaj imię");
    	if (userName.equals("")) {
    		userName = "anon";
    	}
    	
	    this.publisher = publisher;
	    this.communicationService = communicationService;
	    
	    userId = communicationService.login(userName, new Timestamp(System.currentTimeMillis()));
	    if (userId == -1) {
	    	JOptionPane.showMessageDialog(null, "User exist!", "Error",
                    JOptionPane.ERROR_MESSAGE);
	    	new MainWindow(publisher, communicationService);
	    	//return;
	    }

	    initialize();
	}

	private void initialize() {
		// TODO Auto-generated method stub
		System.out.println("@@@ Main Windows initialize ");

    	setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
    	WindowListener exitListener = new WindowAdapter() {

            @Override
            public void windowClosing(WindowEvent e) {
                communicationService.logout(userId);
                System.exit(0);
            }
        };
        addWindowListener(exitListener);
    	label = new Label();
    	label.setText("Napisz wiadomość");
    	label.setSize(50, 30);
    	
    	/*frame.*/
    	setSize(500, 400);
    	setTitle("Chat " + userName);
    	
    	writeMessageField = new JTextField();
    	writeMessageField.setPreferredSize(new Dimension(400 - label.getWidth(), 30));
    	writeMessageField.setText("Napisz wiadomość...");

    	send = new JButton("Wyślij");
    	send.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				sendMessage();
			}
		});
    	
    	writeMessageField.addMouseListener(new MouseListener() {
			
			@Override
			public void mouseReleased(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void mousePressed(MouseEvent e) {
				// TODO Auto-generated method stub
				if (firstClick) {
					firstClick = false;
					writeMessageField.setText("");
				}
			}
			
			@Override
			public void mouseExited(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void mouseEntered(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void mouseClicked(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}
		});
    	
    	writeMessageField.addKeyListener(new KeyListener() {
			
			@Override
			public void keyTyped(KeyEvent e) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void keyReleased(KeyEvent e) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void keyPressed(KeyEvent e) {
				// TODO Auto-generated method stub
				if (e.getKeyCode() == KeyEvent.VK_ENTER) {
					sendMessage();
				}
			}
		});
    	
    	receivedMessages = new JTextArea();
    	receivedMessages.setOpaque(true);
    	receivedMessages.setBackground(Color.white);
    	receivedMessages.setText("Witaj " + userName + "!");
    	receivedMessages.setEditable(false);
    	receivedMessages.setSize(350, 200);
    	
    	scrollPane = new JScrollPane(receivedMessages);
    	scrollPane.setBounds(10,60,500,300);
    	scrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
    	caret = (DefaultCaret)receivedMessages.getCaret();
    	caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
    	
    	JRadioButton hessianRadioButton = new JRadioButton("Hessian");
    	hessianRadioButton.addActionListener(new ActionListener() {
			
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				receivedMessages.setText(receivedMessages.getText() +
						"\nWybrana technologia: Hessian\n");
				
				communicationService.setTechnology("hessian");
			}
		});
    	JRadioButton burlapRadioButton = new JRadioButton("Burlap");
    	burlapRadioButton.addActionListener(new ActionListener() {
			
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				receivedMessages.setText(receivedMessages.getText() +
						"\nWybrana technologia: Burlap\n");
				
				communicationService.setTechnology("burlap");
			}
		});
    	JRadioButton xmlRpcRadioButton = new JRadioButton("XML RPC");
    	xmlRpcRadioButton.addActionListener(new ActionListener() {
			
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				receivedMessages.setText(receivedMessages.getText() +
						"\nWybrana technologia: XML-RPC");

				communicationService.setTechnology("xmlrpc");
			}
		});
    	hessianRadioButton.setSelected(true);
    	receivedMessages.setText(receivedMessages.getText() +
				"\nWybrana technologia: Hessian\n");
    	
    	technologies = new ButtonGroup();
    	technologies.add(hessianRadioButton);
    	technologies.add(burlapRadioButton);
    	technologies.add(xmlRpcRadioButton);
    	
    	radios = new JPanel();
    	radios.setLayout(new GridLayout(1, 3));
    	radios.add(hessianRadioButton);
    	radios.add(burlapRadioButton);
    	radios.add(xmlRpcRadioButton);
    	/*frame.*/
    	add(radios, BorderLayout.NORTH);

    	/*frame.*/
    	add(scrollPane, BorderLayout.CENTER);
    	
    	message = new JPanel(); 
    	message.setLayout(new FlowLayout());
//	    	message.add(label);
    	message.add(writeMessageField);
    	message.add(send);
    	
    	/*frame.*/
    	add(message, BorderLayout.SOUTH);
 
        System.out.println( "Hello World!" );
	}
	
	private void sendMessage() {
		// TODO Auto-generated method stub
		System.out.println("Send button pressed");
		communicationService.sendMessage(userId, userName, writeMessageField.getText());
		
		writeMessageField.setText("");
	}
	
	@Override
	public void onApplicationEvent(ApplicationEvent event) {
		if (event.getClass().equals(MessageEvent.class)) {
			onMessageReceived(event);	
		}
	}

	private void onMessageReceived(ApplicationEvent event) {
		// TODO Auto-generated method stub
		Message message;
		int index;
		List<Message> list = new ArrayList<>();
		int i;
		
		System.out.println("@@@ MainWindow onMEssageReceived " + timestamp);
		
		list = ((MessageEvent) event).getMessages();
		System.out.println(list);
		
		index = findIndexOfMessage(list, timestamp);
		if (index < 0) {
			return;
		}
		
		for (i = index; i<list.size(); i++) {
			message = list.get(i);
			
			receivedMessages.setText(receivedMessages.getText() + message.getSenderName() + 
				": " + message.getMessage() + "\n");
		}
		timestamp = list.get(list.size() -1).getMessageTimestamp();
	}

	private int findIndexOfMessage(List<Message> list, long timestamp) {
		// TODO Auto-generated method stub
		long lastMessageTimestamp = timestamp;
		Message m;
		long ts;
		int i;
		
		for (i = 0; i < list.size();i++) {
			m = list.get(i);
			ts = m.getMessageTimestamp();
			if (ts > lastMessageTimestamp) {
				return i;
			}
		}
		return -1;
	}

}
